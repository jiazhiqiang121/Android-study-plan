设计模式

1.把问题归零 
2.找到应用中需要修改代码的地方
3.在于随时想到系统以后可能需要的变化以及应付变化的原则
4.把会变化的部分取出来并封装起来，好让其他部分不会收到影响。
5.分开变化和不会变化的部分
6.在实现类构造方法中动态初始化行为和属性
7.动态改变行为需要在super类设置一个公共的setter方法
8.建立弹性的设计，可以维护可以应付改变
9.良好的设计必须具备可服用，可扩充，可维护三个特性
10.大多数的模式都允许系统局部改变独立于其他部分
11.我们常把系统中会变化的部分抽出来封装

一.策略模式
基础
抽象.封装.继承.多态
设计原则
1.封装变化：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。
2.针对接口编程，而不是针对实现编程
3.多用组合，少用继承
正式定义
策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

二.观察者模式
正式定义
观察者模式定义了对象之间的一对多依赖关系，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。

设计原则
为了交互对象之间的松耦合而设计



