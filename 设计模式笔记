设计模式

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

一.策略模式
笔记：
1.把问题归零 
2.找到应用中需要修改代码的地方
3.在于随时想到系统以后可能需要的变化以及应付变化的原则
4.把会变化的部分取出来并封装起来，好让其他部分不会收到影响。
5.分开变化和不会变化的部分
6.在实现类构造方法中动态初始化行为和属性
7.动态改变行为需要在super类设置一个公共的setter方法
8.建立弹性的设计，可以维护可以应付改变
9.良好的设计必须具备可复用，可扩充，可维护三个特性
10.大多数的模式都允许系统局部改变独立于其他部分
11.我们常把系统中会变化的部分抽出来封装
------------------------------------------------------------
基础
抽象.封装.继承.多态
设计原则
1.封装变化：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。
2.针对接口编程，而不是针对实现编程
3.多用组合，少用继承
正式定义
策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

二.观察者模式
笔记：
1.在观察者模式中，会改变的是主题的状态，以及观察者的数目和类型。用这个模式，你可以改变依赖与主题状态的对象，却不必改变主题。
2.主题和观察者都使用接口：观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。这样让两者之间运作正常，又同时具有
松耦合的优点。
3.观察者模式利用‘组合’将许多观察者组合进主题中。对象之间的这种关系不是通过继承产生的，而是在运行时利用组合的方式产生的。
------------------------------------------------------------
正式定义
观察者模式定义了对象之间的一对多依赖关系，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。

设计原则
为了交互对象之间的松耦合而设计

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

三.装饰者模式
开放关闭原则
设计原则
类应该对扩展开放，对修改关闭

笔记：
1.装饰者和被装饰者对象有相同的超类型
2.你可以用一个或多个装饰者包装一个对象
3.既然装饰者和被装饰者对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合，可以用装饰过的对象代替它。
4.装饰者可以在所委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的。
5.对象可以在任何时候被装饰，所以可以在运行时动态地，不限量地用你喜欢的装饰者来装饰对象。
6.继承属于扩展形式之一，但不见得达到弹性设计的最佳方式。
7.在我们的设计中，应该允许行为可以被扩展，而无须修改现有的代码。
8.组合和委托可用于在运行时动态地加上新的行动
9.除了继承，装饰者模式也可以让我们扩展行为。
10.装饰者模式意味着一群装饰者类，这些类用来包装具体组件。
11.装饰者类反映出被装饰的组件类型
12.装饰者可以在被装饰者的行为前面或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。
13.你可以用无数个装饰者包装一个组件。
14.装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。
15.装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂。

正式定义
装饰者模式动态地将责任附加在对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

四.工厂模式
分类
简单工厂模式，多态性工厂模式，抽象工厂模式
笔记
1.需要创建产品家族和想让制造的相关产品集合起来，需要使用抽象工厂模式
2.把客户代码从需要实例化的具体类中解耦。或者如果你不知道将来需要实例化那些具体类时候，继承子类并实现工厂方法。
3.所有的工厂都是用来封装对象的创建
4.简单工厂，虽然不是真正的设计模式，但可以将客户程序从具体类解耦。
5.工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象。
6.抽象工厂使用对象组合：对象的创建被实现在工厂接口所暴露出来的方法中。
7.所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合。
8.工厂方法允许类将实例化延迟到子类进行。
9.抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。
10.依赖倒置原则，指导我们避免依赖具体类型，而要尽量依赖抽象。
11.工厂是很有威力的技巧，帮助我们针对抽象编程，而不是要针对具体类编程。

定义
1.简单工厂模式
2.工厂方法模式 
定义了一个创建对象的接口，但由子类决定要实例化的类时哪一个。工厂方法让类把实例化推迟到子类。
3.抽象工厂模式 
提供一个接口，用于创建相关或依赖对象的家族，而不是明确指定具体类。

3.原则
要依赖抽象，不要依赖具体类
不能让高层组件依赖底层组件，两者都应该依赖于抽象
指导：
1.变量不可以持有具体类的引用
2.不要让类派生自具体类
3.不要覆盖基类中已实现的方法

五.单例模式
确保一个类只有一个实例，并提供一个全局访问点。

笔记
1.单例模式确保程序中一个类最多只有一个实例。
2.单例模式也提供访问这个实例的全局点。
3.在Java中实现单例模式需要私有的构造器，一个静态方法和一个静态变量。
4.确定在性能和资源上的限制，然后小心地选择适当的方案来实现单例，以解决多线程的问题。
5.如果不是采用Java1.5，双重检查加锁实现会失效。
6.小心，如果使用多个类加载器，可能导致单例失效而产生多个实例。
7.如果使用jvm1.2或之前的版本，必须建立单例注册表，以免垃圾收集器将单例回收。

六.命令模式
定义
命令模式将“请求”封装成对象，以便使用不同的请求，队列或者日志来参数化其它对象，命令模式也支持可以撤销的操作。
笔记：
1.命令模式将发出请求的对象和执行请求的对象解耦；
2.在被解耦的两者之间是通过命令对象进行沟通的，命令对象封装了接收者和一个或一组动作；
3.调用者通过调用命令对象的execute()发出请求，这会使得接收者的动作被调用；
4.调用者可以接受命令当作参数，甚至在运动时动态地进行；
5.命令可以支持撤销，做法是实现一个undo()方法来回到execute()被执行前的状态。

优点：
1.降低了请求者和发起者的耦合，降低了系统的耦合度；
2.对命令更容易控制，可以自由组合不同的命令组；
3.对命令的扩展极其容易，新命令很容易加到系统中；
缺点：
类的数量膨胀太严重。












